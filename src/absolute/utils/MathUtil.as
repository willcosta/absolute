package absolute.utils {	/**	 * @author Will Costa	 * @author http://www.willcosta.net	 */
	public class MathUtil {		/**		 * Constant to convert from degrees to radians		 */		public static const DEGREES_TO_RADIANS : Number = Math.PI / 180;		/**		 * Constant to convert from radians to degrees		 */		public static const RADIANS_TO_DEGREES : Number = 180 / Math.PI;			//----------------------------------		//  Public Functions		//----------------------------------   				/**		 * Gets a random number between the two parameter		 * 		 * @param a the first value;		 * @param b the second value;		 */		public static function randomBetween(a : Number,b : Number) : Number {			var r : Number = Math.random() * (b - a) + a;			return r;		}		/**		 * Force a number two stay between two values;		 * 		 * @param input The number that will be adjusted if needed;		 * @param min The minimun value that the input should be;		 * @param max The maximum value that the input should be;		 */		public static function stayBetween(input : Number,min : Number, max : Number) : Number {			var a : Number = input;			a = a < min ? min : a;			a = a > max ? max : a;			return a;		}		/**		 * Get the shortest distance between two angles (degrees)		 * 		 * @param alpha The first value		 * @param beta The second value		 * 		 * @return The distance between alpha and beta		 */				public static function getDegreeDistance(alpha : Number, beta : Number) : Number {			var delta : Number = DEGREES_TO_RADIANS * (beta - alpha);			return Math.atan2(Math.sin(delta), Math.cos(delta)) * RADIANS_TO_DEGREES;					}		/**		 * Retorna o mairo n√∫mero		 * @args array de numeros 		 */		public static function getMax(...args) : Number {			var max : Number = args[0];			for (var i : int = 0;i < args.length;i++) {				if(args[i] > max) max = args[i]; 			}			return max;		}		/**		 * Retorna o raio de um circulo de acordo com sua area;		 */		public static function getRadius(area : Number) : Number {			var radius : Number = Math.sqrt(area / Math.PI);			return radius;		}				/**		 * Retorna a area de um circulo de acordo com seu raio		 */		public static function getAreaOfCircle(radius : Number) : Number {			var area : Number = Math.PI * Math.pow(radius, 2);			return area;		}				/**		 * Calculates the angle between two points		 */		public static function angleBetweenTwoPoints(a : Object, b : Object) : Number {			return Math.atan2(b.y - a.y, b.x - a.x);		}				/**		 * Calculates the distance between two points		 */		public static function distanceBetweenTwoPoints(a : Object, b : Object) : Number {			var dx : Number = b.x - a.x;			var dy : Number = b.y - a.y;			var dist:Number = Math.sqrt(dx * dx + dy * dy);			return dist;		}				/**		 * Converts an angle from degrees to radian		 * @param angle The angle in degrees		 */		public static function toRadian(angle:Number):Number{			return angle * DEGREES_TO_RADIANS;		}				/**		 * Converts an angle from radian to degrees		 * @param angle The angle in degrees		 */		public static function toDegrees(angle:Number):Number{			return angle * RADIANS_TO_DEGREES;		}		   		//----------------------------------    	//  Private Functions   		//----------------------------------   		   		//----------------------------------    	//  Event Handlers   		//----------------------------------   		   		//----------------------------------    	//  Getters & Setters   		//----------------------------------	}}